%!PS-Adobe-2.0%%Title: {DSK}<home>larry>lispcourse>OUTLINE32.PS%%Creator: PostScript Driver Copyright (C) 1988-1992 Venue and others%%CreationDate:  7-Nov-2023 21:40:20%%EndComments/bdef {bind def} bind def
/ldef {load def} bdef
/S /show ldef
/M /moveto ldef
/DR {transform round exch round exch itransform} bdef
/L {gsave newpath setlinewidth 0 setlinecap
  M lineto currentpoint stroke grestore M} bdef
/L1 {gsave newpath 0 setdash setgray setlinewidth 0 setlinecap
  M lineto currentpoint stroke grestore M} bdef
/F {findfont exch scalefont setfont} bdef
/CLP {newpath M dup 0 rlineto exch 0 exch rlineto
  neg 0 rlineto closepath clip newpath} bdef
/R {gsave setgray newpath M dup 0 rlineto exch 0 exch
  rlineto neg 0 rlineto closepath eofill grestore} bdef
/ellipsedict 9 dict def
ellipsedict /mtrx matrix put
/ellipse
 { ellipsedict begin
  /endangle exch def
  /startangle exch def
  /orientation exch def
  /minorrad exch def
  /majorrad exch def
  /y exch def
  /x exch def
  /savematrix mtrx currentmatrix def
  x y translate
  orientation rotate
  majorrad minorrad scale
  0 0 1 startangle endangle arc
  savematrix setmatrix
 end } bdef
/concatprocs
 {/proc2 exch cvlit def
  /proc1 exch cvlit def
  /newproc proc1 length proc2 length add array def
  newproc 0 proc1 putinterval
  newproc proc1 length proc2 putinterval
  newproc cvx
 } bdef
/resmatrix matrix def
/findresolution
 {72 0 resmatrix defaultmatrix dtransform
  /yres exch def /xres exch def
  xres dup mul yres dup mul add sqrt
 } bdef
/thebitimage
 {/maskp exch def
  /bihgt exch def
  /biwid exch def
  /byte 1 string def
  /strbufl biwid 8 div ceiling cvi def
  /strbuf strbufl string def
  maskp not{{1 exch sub} currenttransfer concatprocs settransfer} if
  biwid bihgt
  maskp { true } { 1 } ifelse
  [biwid 0 0 bihgt 0 0]
  {/col 0 def
   {currentfile byte readhexstring pop 0 get
    dup 16#B2 eq {pop
    currentfile byte readhexstring pop 0 get 1 add
    currentfile byte readhexstring pop pop /nbyte byte 0 get def
    { strbuf col nbyte put /col col 1 add def} repeat}
   {dup 16#B3 eq {pop /col col
    currentfile byte readhexstring pop
    0 get add 1 add def}
    {16#B4 eq {currentfile byte readhexstring pop pop} if
     strbuf col byte 0 get put /col col 1 add def} ifelse
   } ifelse
   col strbufl ge { exit } if } loop
   strbuf }
  maskp { imagemask } { image } ifelse
 } bdef
/setuserscreendict 22 dict def
setuserscreendict begin
 /tempctm matrix def
 /temprot matrix def
 /tempscale matrix def
end
/setuserscreen
 {setuserscreendict begin
   /spotfunction exch def
   /screenangle exch def
   /cellsize exch def
   /m tempctm currentmatrix def
   /rm screenangle temprot rotate def
   /sm cellsize dup tempscale scale def
   sm rm m m concatmatrix m concatmatrix pop
   1 0 m dtransform /y1 exch def /x1 exch def
   /veclength x1 dup mul y1 dup mul add sqrt def
   /frequency findresolution veclength div def
   /newscreenangle y1 x1 atan def
   m 2 get m 1 get mul m 0 get m 3 get mul sub
   0 gt { { neg } /spotfunction load concatprocs
          /spotfunction exch def } if
   frequency newscreenangle /spotfunction load setscreen
  end
 } bdef
/setpatterndict 18 dict def
setpatterndict begin
 /bitison
  {/ybit exch def /xbit exch def
   /bytevalue bstring ybit bwidth mul xbit 8 idiv add get def
   /mask 1 7 xbit 8 mod sub bitshift def
   bytevalue mask and 0 ne
  } bdef
end
/bitpatternspotfunction
 {setpatterndict begin
   /y exch def /x exch def
   /xindex x 1 add 2 div bpside mul 1 sub cvi def
   /yindex y 1 add 2 div bpside mul 1 sub cvi def
   xindex yindex bitison
    {/onbits onbits 1 add def 1}
    {/offbits offbits 1 add def 0} ifelse
  end
 } bdef
/setpattern
 {setpatterndict begin
   /cellsz exch def
   /angle exch def
   /bwidth exch def
   /bpside exch def
   /bstring exch def
   /onbits 0 def /offbits 0 def
   cellsz angle /bitpatternspotfunction load setuserscreen
   {} settransfer
   offbits offbits onbits add div setgray
  end
 } bdef
% - - - - - Fraction-setting code, to support NS fonts better - - - - -
/fractiondict 20 dict def
/fractionshow 
{ fractiondict begin
/denom exch def 
/num exch def 
/regfont currentfont def
/fractfont currentfont [.65 0 0 .6 0 0] makefont def 
gsave newpath 0 0 moveto 
(1) true charpath flattenpath pathbbox 
/height exch def pop pop pop
 grestore
0 .4 height mul rmoveto
fractfont setfont num show
0 .4 height mul neg rmoveto regfont setfont (\244) show
fractfont setfont denom show regfont setfont end } bdef
/f14 { (1) (4) fractionshow } bdef
/f12 { (1) (2) fractionshow } bdef
/f34 { (3) (4) fractionshow } bdef
/f18 { (1) (8) fractionshow } bdef
/f38 { (3) (8) fractionshow } bdef
/f58 { (5) (8) fractionshow } bdef
/f78 { (7) (8) fractionshow } bdef
/f13 { (1) (3) fractionshow } bdef
/f23 { (2) (3) fractionshow } bdef
/bboxdict 20 dict def
/bboxchk { bboxdict begin
/regfont currentfont def
/chkfont currentfont [1.25 0 0 1.25 0 0] makefont def 
gsave newpath 0 0 moveto 
(\161) true charpath flattenpath pathbbox 
/height exch def pop pop pop 
 grestore 
 currentpoint 
 .2 height mul .3 height mul rmoveto
chkfont setfont (\063) show
 moveto
 regfont setfont
(\161) show end } bdef
/rencdict 15 dict def
/encodefont { rencdict begin
/newname exch def
/oldfont exch def
/newcodes [
8#001 /Aacute
8#002 /Acircumflex
8#003 /Adieresis
8#004 /Agrave
8#005 /Aring
8#006 /Atilde
8#007 /Ccedilla
8#010 /Eacute
8#011 /Ecircumflex
8#012 /Edieresis
8#013 /Egrave
8#014 /Iacute
8#015 /Icircumflex
8#016 /Idieresis
8#017 /Igrave
8#020 /Ntilde
8#021 /Oacute
8#022 /Ocircumflex
8#023 /Odieresis
8#024 /Ograve
8#025 /Otilde
8#026 /Scaron
8#027 /Uacute
8#030 /Ucircumflex
8#031 /Udieresis
8#032 /Ugrave
8#033 /Ydieresis
8#034 /Zcaron
8#177 /periodinferior
8#201 /aacute
8#202 /acircumflex
8#203 /adieresis
8#204 /agrave
8#205 /aring
8#206 /atilde
8#207 /ccedilla
8#210 /eacute
8#211 /ecircumflex
8#212 /edieresis
8#213 /egrave
8#214 /iacute
8#215 /icircumflex
8#216 /idieresis
8#217 /igrave
8#220 /ntilde
8#221 /oacute
8#222 /ocircumflex
8#223 /odieresis
8#224 /ograve
8#225 /otilde
8#226 /scaron
8#227 /uacute
8#230 /ucircumflex
8#231 /udieresis
8#232 /ugrave
8#233 /ydieresis
8#234 /zcaron
8#235 /Eth
8#236 /eth
8#237 /Thorn
8#240 /thorn
 ] def
/olddict oldfont findfont def /newfont olddict maxlength dict def
olddict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse }
 { pop pop } ifelse } forall
newfont /FontName newname put
newcodes aload pop
newcodes length 2 idiv { newfont /Encoding get 3 1 roll put } repeat 
newname newfont definefont pop end } def
 /accentdict 10 dict def 
 /accentor { accentdict begin /scaler exch def /delta exch def 
/unders exch def /accents exch def /mainch exch def /scrt (X) def
 /w1 mainch stringwidth pop def 
 currentpoint mainch show currentpoint 4 2 roll 
accents { /ch exch def 2 copy moveto 
         scrt 0 ch put 
         /w2 scrt stringwidth pop def 
         w1 w2 sub 2 div delta rmoveto scrt show 
         /delta delta 150 scaler mul 9 div add def
        } forall 
unders { /ch exch def 2 copy moveto 
         scrt 0 ch put 
         /w2 scrt stringwidth pop def 
         ch 46 eq { w1 w2 sub 2 div -175 scaler mul 9 div rmoveto scrt show 0 175 rmoveto }
           { w1 w2 sub 2 div 0 rmoveto scrt show } ifelse 
        } forall 
 pop pop moveto end } def 
%%EndProlog
%%BeginSetup
letter/imagesizefactor 1 def%%EndSetup/Courier /Courier-Acnt encodefont
800 /Courier-Acnt F

%%Page: 1 1
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
54000 75600 M (F.G.H.          ) S
54000 73800 M (5/30/85) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 70957 M (LispCourse #32:  Homework on circular queues) S
7200 67157 M (Exercise) S
1200 /Times-Bold-Acnt F
10800 63506 M (Overall problem) S
1200 /Times-Roman-Acnt F
14400 60506 M (Write the functions to manage a circular queue.  Randomly add and delete ) S
14400 58706 M (random numbers to and from this queue.  Print out the contents of the queue after ) S
14400 56906 M (each addition or deletion.) S
1200 /Times-Bold-Acnt F
10800 53306 M (Defintions) S
1200 /Times-Roman-Acnt F
14400 50306 M (A ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(queue) S
1200 /Times-Roman-Acnt F
( is a data structure that can hold from 1 to N other data objects.  The ) S
14400 48506 M (queue has a beginning \(called its ) S
1200 /Times-BoldItalic-Acnt F
(head) S
1200 /Times-Roman-Acnt F
(\) and an end \(called its ) S
1200 /Times-BoldItalic-Acnt F
(tail) S
1200 /Times-Roman-Acnt F
(\).   You can add ) S
14400 46706 M (new data data items to the queue \(as long as you don't exceed N items\) and you ) S
14400 44906 M (can remove data items from the queue.  New data objects are always added to the ) S
14400 43106 M (tail of the queue and old data items are always removed from the head of the ) S
14400 41306 M (queue, just like in the queues at banks, airline counters, etc.) S
14400 38306 M (A ) S
1200 /Times-BoldItalic-Acnt F
(circular queue) S
1200 /Times-Roman-Acnt F
( is one where the N places for data objects are arranged in a ) S
14400 36506 M (circle.  There is a pointer for the head and a pointer for the tail.  When you add a ) S
14400 34706 M (new data object, you put it into the place indicated by the head pointer, and then ) S
14400 32906 M (move the head pointer clockwise by one.  When you remove a data object, you ) S
14400 31106 M (take the one indicated by the tail pointer, and then move the tail pointer clockwise ) S
14400 29306 M (by one.  You can keep adding and deleteing elements until the head pointer equals ) S
14400 27506 M (the tail pointer, in which case the queue is either empty or full, depending on ) S
14400 25706 M (whether you just removed or added an item.) S
/Helvetica /Helvetica-Acnt encodefont
1200 /Helvetica-Acnt F
42433.0 22430.0 M (TAIL) S

gsave newpath  1 setlinecap 1 setlinejoin 200 setlinewidth 41300 22500 M
stroke
grestore
41300 22500 36500 22500 200 L

gsave newpath  1 setlinecap 1 setlinejoin 200 setlinewidth 36500 22500 M
stroke
grestore
37539 23100 36500 22500 200 L
37539 21900 36500 22500 200 L
2599 199 31601 20801 0 R
2599 199 35601 20801 0 R
199 3799 31801 23201 0 R
199 3799 31801 20801 0 R
1000 /Helvetica-Acnt F
33144.0 21821.0 M (12) S
2599 199 37201 18401 0 R
2599 199 41201 18401 0 R
199 3799 37401 20801 0 R
199 3799 37401 18401 0 R
1000 /Helvetica-Acnt F
38744.0 19421.0 M (16) S
2599 199 26001 17601 0 R
2599 199 30001 17601 0 R
199 3799 26201 20001 0 R
199 3799 26201 17601 0 R
2599 199 27601 12801 0 R
2599 199 31601 12801 0 R
199 3799 27801 15201 0 R
199 3799 27801 12801 0 R
2599 199 35601 12801 0 R
2599 199 39601 12801 0 R
199 3799 35801 15201 0 R
199 3799 35801 12801 0 R
1000 /Helvetica-Acnt F
37144.0 13821.0 M (22) S
1200 /Helvetica-Acnt F
16434.0 13630.0 M (HEAD) S

gsave newpath  1 setlinecap 1 setlinejoin 200 setlinewidth 21300 13700 M
stroke
grestore
26900 13700 21300 13700 200 L

gsave newpath  1 setlinecap 1 setlinejoin 200 setlinewidth 26900 13700 M
stroke
grestore
26900 13700 25861 13100 200 L
26900 13700 25861 14300 200 L
1000 /Helvetica-Acnt F
18736.5 21842.0 M (Circular Queue) S
17543.0 20842.0 M (Containing Numbers) S
1200 /Times-Bold-Acnt F
10800 8906 M (Subproblems) S
grestore savepage restore showpage

%%Page: 2 2
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (2) S
7200 75600 M (LispCourse #32:  Homework on circular queues) S
14400 71106 M (1\)) S
16200 71106 M (Write a function that produces a list of N NILs.) S
14400 68106 M (2\)) S
16200 68106 M (Write a function that creates a circular list out of a non-circular list by making ) S
16200 66306 M (the CDR of the last CONS cell in the list point to the CAR of the first CONS ) S
16200 64506 M (cell in the list.  \(Caution: You will have to ^D when Lisp starts printing the ) S
16200 62706 M (result of this function otherwise it will go on forever.\)) S
14400 59706 M (3\)) S
16200 59706 M (Use the functions from 1 and 2 to create a circular queue \(i.e., list\) containing ) S
16200 57906 M (all NILs.  \(See caution from 2\).  SETQ LC.Queue to this circular list.) S
14400 54906 M (4\)) S
16200 54906 M (Set up the pointers LC.Head and LC.Tail.  Originally both should point to the ) S
16200 53106 M (same CONS cell that LC.Queue does, indicating that the queue is empty.) S
14400 50106 M (5\)) S
16200 50106 M (Diagram the CONS cells in the queue and the LC.Queue, LC.Head, and ) S
16200 48306 M (LC.Tail pointers.  Use this diagram to help you in the following problems.) S
14400 45306 M (6\)) S
16200 45306 M (Write a function that adds a number to the tail of the queue.  Be sure to check ) S
16200 43506 M (first that the queue is not full.  If it is return NIL, otherwise return T.  \(Hint: ) S
16200 41706 M (RPLACA and CDR are critical here\).  ) S
14400 38706 M (7\)) S
16200 38706 M (Write a function that removes a number from the head of the queue.  Be sure ) S
16200 36906 M (to check first that the queue is not empty.  If it is, return NIL.  \(Hint: CAR and ) S
16200 35106 M (CDR are critical here\).) S
14400 32106 M (8\)) S
16200 32106 M (Write a function the prints all the numbers in the queue.  \(Hint: Produce a list ) S
16200 30306 M (starting at the tail and going to the head, then reverse this list and print it.\)  ) S
16200 28506 M (Note: Use the function ) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
(\(PRIN1 ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(X) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( to print a ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(X) S
1200 /Times-Roman-Acnt F
( in the Exec window.  Use ) S
1200 /Times-Bold-Acnt F
16200 26706 M (\(TERPRI\)) S
1200 /Times-Roman-Acnt F
( to print end a line.) S
14400 23706 M (9\)) S
16200 23706 M (Write a function that randomly excercises the queue as follows:) S
18000 20706 M (Repeat the following 100 times.) S
20400 18306 M (Print the queue.) S
20400 15906 M (Generate a random integer between 0 and 1, inclusive.) S
22800 13506 M (If this random integer is 0, then remove an item from the queue ) S
22800 11706 M (and print it preceded by an appropriate message.  If the delete ) S
grestore savepage restore showpage

%%Page: 3 3
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (3) S
7200 75600 M (LispCourse #32:  Homework on circular queues) S
22800 71106 M (fails because the queue is empty, just print an appropriate ) S
22800 69306 M (message.) S
22800 66906 M (If this random integer is 1, then generate a second random ) S
22800 65106 M (integer between 1 and 99.  Add this second random integer to ) S
22800 63306 M (the queue and print the number preceded by an appropriate ) S
22800 61506 M (message.  If the add fails because the queue is full, just print an ) S
22800 59706 M (appropriate message.) S
18000 56706 M (Note:  The function call) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
( \(RAND ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(N) S
1200 /Times-Bold-Acnt F
( ) S
1200 /Times-BoldItalic-Acnt F
(M) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( generates a random integer ) S
18000 54906 M (between ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(N) S
1200 /Times-Roman-Acnt F
( and ) S
1200 /Times-Italic-Acnt F
(M) S
1200 /Times-Roman-Acnt F
(.) S
grestore savepage restore showpage

%%Trailer
