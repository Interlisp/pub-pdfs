%!PS-Adobe-2.0%%Title: {DSK}<home>larry>lispcourse>OUTLINE28.PS%%Creator: PostScript Driver Copyright (C) 1988-1992 Venue and others%%CreationDate:  7-Nov-2023 21:40:17%%EndComments/bdef {bind def} bind def
/ldef {load def} bdef
/S /show ldef
/M /moveto ldef
/DR {transform round exch round exch itransform} bdef
/L {gsave newpath setlinewidth 0 setlinecap
  M lineto currentpoint stroke grestore M} bdef
/L1 {gsave newpath 0 setdash setgray setlinewidth 0 setlinecap
  M lineto currentpoint stroke grestore M} bdef
/F {findfont exch scalefont setfont} bdef
/CLP {newpath M dup 0 rlineto exch 0 exch rlineto
  neg 0 rlineto closepath clip newpath} bdef
/R {gsave setgray newpath M dup 0 rlineto exch 0 exch
  rlineto neg 0 rlineto closepath eofill grestore} bdef
/ellipsedict 9 dict def
ellipsedict /mtrx matrix put
/ellipse
 { ellipsedict begin
  /endangle exch def
  /startangle exch def
  /orientation exch def
  /minorrad exch def
  /majorrad exch def
  /y exch def
  /x exch def
  /savematrix mtrx currentmatrix def
  x y translate
  orientation rotate
  majorrad minorrad scale
  0 0 1 startangle endangle arc
  savematrix setmatrix
 end } bdef
/concatprocs
 {/proc2 exch cvlit def
  /proc1 exch cvlit def
  /newproc proc1 length proc2 length add array def
  newproc 0 proc1 putinterval
  newproc proc1 length proc2 putinterval
  newproc cvx
 } bdef
/resmatrix matrix def
/findresolution
 {72 0 resmatrix defaultmatrix dtransform
  /yres exch def /xres exch def
  xres dup mul yres dup mul add sqrt
 } bdef
/thebitimage
 {/maskp exch def
  /bihgt exch def
  /biwid exch def
  /byte 1 string def
  /strbufl biwid 8 div ceiling cvi def
  /strbuf strbufl string def
  maskp not{{1 exch sub} currenttransfer concatprocs settransfer} if
  biwid bihgt
  maskp { true } { 1 } ifelse
  [biwid 0 0 bihgt 0 0]
  {/col 0 def
   {currentfile byte readhexstring pop 0 get
    dup 16#B2 eq {pop
    currentfile byte readhexstring pop 0 get 1 add
    currentfile byte readhexstring pop pop /nbyte byte 0 get def
    { strbuf col nbyte put /col col 1 add def} repeat}
   {dup 16#B3 eq {pop /col col
    currentfile byte readhexstring pop
    0 get add 1 add def}
    {16#B4 eq {currentfile byte readhexstring pop pop} if
     strbuf col byte 0 get put /col col 1 add def} ifelse
   } ifelse
   col strbufl ge { exit } if } loop
   strbuf }
  maskp { imagemask } { image } ifelse
 } bdef
/setuserscreendict 22 dict def
setuserscreendict begin
 /tempctm matrix def
 /temprot matrix def
 /tempscale matrix def
end
/setuserscreen
 {setuserscreendict begin
   /spotfunction exch def
   /screenangle exch def
   /cellsize exch def
   /m tempctm currentmatrix def
   /rm screenangle temprot rotate def
   /sm cellsize dup tempscale scale def
   sm rm m m concatmatrix m concatmatrix pop
   1 0 m dtransform /y1 exch def /x1 exch def
   /veclength x1 dup mul y1 dup mul add sqrt def
   /frequency findresolution veclength div def
   /newscreenangle y1 x1 atan def
   m 2 get m 1 get mul m 0 get m 3 get mul sub
   0 gt { { neg } /spotfunction load concatprocs
          /spotfunction exch def } if
   frequency newscreenangle /spotfunction load setscreen
  end
 } bdef
/setpatterndict 18 dict def
setpatterndict begin
 /bitison
  {/ybit exch def /xbit exch def
   /bytevalue bstring ybit bwidth mul xbit 8 idiv add get def
   /mask 1 7 xbit 8 mod sub bitshift def
   bytevalue mask and 0 ne
  } bdef
end
/bitpatternspotfunction
 {setpatterndict begin
   /y exch def /x exch def
   /xindex x 1 add 2 div bpside mul 1 sub cvi def
   /yindex y 1 add 2 div bpside mul 1 sub cvi def
   xindex yindex bitison
    {/onbits onbits 1 add def 1}
    {/offbits offbits 1 add def 0} ifelse
  end
 } bdef
/setpattern
 {setpatterndict begin
   /cellsz exch def
   /angle exch def
   /bwidth exch def
   /bpside exch def
   /bstring exch def
   /onbits 0 def /offbits 0 def
   cellsz angle /bitpatternspotfunction load setuserscreen
   {} settransfer
   offbits offbits onbits add div setgray
  end
 } bdef
% - - - - - Fraction-setting code, to support NS fonts better - - - - -
/fractiondict 20 dict def
/fractionshow 
{ fractiondict begin
/denom exch def 
/num exch def 
/regfont currentfont def
/fractfont currentfont [.65 0 0 .6 0 0] makefont def 
gsave newpath 0 0 moveto 
(1) true charpath flattenpath pathbbox 
/height exch def pop pop pop
 grestore
0 .4 height mul rmoveto
fractfont setfont num show
0 .4 height mul neg rmoveto regfont setfont (\244) show
fractfont setfont denom show regfont setfont end } bdef
/f14 { (1) (4) fractionshow } bdef
/f12 { (1) (2) fractionshow } bdef
/f34 { (3) (4) fractionshow } bdef
/f18 { (1) (8) fractionshow } bdef
/f38 { (3) (8) fractionshow } bdef
/f58 { (5) (8) fractionshow } bdef
/f78 { (7) (8) fractionshow } bdef
/f13 { (1) (3) fractionshow } bdef
/f23 { (2) (3) fractionshow } bdef
/bboxdict 20 dict def
/bboxchk { bboxdict begin
/regfont currentfont def
/chkfont currentfont [1.25 0 0 1.25 0 0] makefont def 
gsave newpath 0 0 moveto 
(\161) true charpath flattenpath pathbbox 
/height exch def pop pop pop 
 grestore 
 currentpoint 
 .2 height mul .3 height mul rmoveto
chkfont setfont (\063) show
 moveto
 regfont setfont
(\161) show end } bdef
/rencdict 15 dict def
/encodefont { rencdict begin
/newname exch def
/oldfont exch def
/newcodes [
8#001 /Aacute
8#002 /Acircumflex
8#003 /Adieresis
8#004 /Agrave
8#005 /Aring
8#006 /Atilde
8#007 /Ccedilla
8#010 /Eacute
8#011 /Ecircumflex
8#012 /Edieresis
8#013 /Egrave
8#014 /Iacute
8#015 /Icircumflex
8#016 /Idieresis
8#017 /Igrave
8#020 /Ntilde
8#021 /Oacute
8#022 /Ocircumflex
8#023 /Odieresis
8#024 /Ograve
8#025 /Otilde
8#026 /Scaron
8#027 /Uacute
8#030 /Ucircumflex
8#031 /Udieresis
8#032 /Ugrave
8#033 /Ydieresis
8#034 /Zcaron
8#177 /periodinferior
8#201 /aacute
8#202 /acircumflex
8#203 /adieresis
8#204 /agrave
8#205 /aring
8#206 /atilde
8#207 /ccedilla
8#210 /eacute
8#211 /ecircumflex
8#212 /edieresis
8#213 /egrave
8#214 /iacute
8#215 /icircumflex
8#216 /idieresis
8#217 /igrave
8#220 /ntilde
8#221 /oacute
8#222 /ocircumflex
8#223 /odieresis
8#224 /ograve
8#225 /otilde
8#226 /scaron
8#227 /uacute
8#230 /ucircumflex
8#231 /udieresis
8#232 /ugrave
8#233 /ydieresis
8#234 /zcaron
8#235 /Eth
8#236 /eth
8#237 /Thorn
8#240 /thorn
 ] def
/olddict oldfont findfont def /newfont olddict maxlength dict def
olddict { exch dup /FID ne { dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put } ifelse }
 { pop pop } ifelse } forall
newfont /FontName newname put
newcodes aload pop
newcodes length 2 idiv { newfont /Encoding get 3 1 roll put } repeat 
newname newfont definefont pop end } def
 /accentdict 10 dict def 
 /accentor { accentdict begin /scaler exch def /delta exch def 
/unders exch def /accents exch def /mainch exch def /scrt (X) def
 /w1 mainch stringwidth pop def 
 currentpoint mainch show currentpoint 4 2 roll 
accents { /ch exch def 2 copy moveto 
         scrt 0 ch put 
         /w2 scrt stringwidth pop def 
         w1 w2 sub 2 div delta rmoveto scrt show 
         /delta delta 150 scaler mul 9 div add def
        } forall 
unders { /ch exch def 2 copy moveto 
         scrt 0 ch put 
         /w2 scrt stringwidth pop def 
         ch 46 eq { w1 w2 sub 2 div -175 scaler mul 9 div rmoveto scrt show 0 175 rmoveto }
           { w1 w2 sub 2 div 0 rmoveto scrt show } ifelse 
        } forall 
 pop pop moveto end } def 
%%EndProlog
%%BeginSetup
letter/imagesizefactor 1 def%%EndSetup/Courier /Courier-Acnt encodefont
800 /Courier-Acnt F

%%Page: 1 1
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
54000 75600 M (F.G.H.          ) S
54000 73800 M (5/16/85) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 70957 M (LispCourse #28:  Type Checking; Strings; Arrays) S
7200 67157 M (Type Checking in Interlisp) S
1200 /Times-Bold-Acnt F
10800 64106 M (The Concept of Type Checking) S
1200 /Times-Roman-Acnt F
14400 61106 M (Many programming languages insist that each parameter to a function be typed \233 ) S
14400 59306 M (i.e., that it be declared to be a variable whose value is a given type of data \(e.g., ) S
14400 57506 M (an litatom, a number, or a list\).) S
18000 54906 M (In these languages when you call a function, the language checks the type ) S
18000 53106 M (of each argument in the argument list to make sure that it matches the ) S
18000 51306 M (declared type of each parameter in the parameter list.) S
18000 48706 M (An error results if you call a function with arguments of the wrong type.) S
18000 45906 M (Example from PASCAL:) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
18000 43306 M (function SumOfSquares \(X: INTEGER, Y: INTEGER\): INTEGER) S
18000 41106 M (BEGIN) S
21600 38906 M (SumOfSquares := \(X * X\) + \(Y * Y\)) S
18000 36706 M (END) S
1200 /Times-Roman-Acnt F
18000 33706 M (This PASCAL function definition says that ) S
1200 /Times-Italic-Acnt F
(SumOfSquares) S
1200 /Times-Roman-Acnt F
( is a function ) S
18000 31906 M (that takes two integer arguments and returns an integer. ) S
21600 29306 M (Therefore:) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
21600 26106 M (\(SumOfSquares 2 3\)) S
1200 /Times-Roman-Acnt F
( is okay) S
21600 23506 M (But ) S
1200 /Times-BoldItalic-Acnt F
(\(SumOfSquares "Foo" 4\)) S
1200 /Times-Bold-Acnt F
( ) S
1200 /Times-Roman-Acnt F
(causes an immediate error because ) S
21600 21706 M ("Foo" is not an integer, but a string of characters.) S
25200 19706 M (The error will say something like "First argument to ) S
25200 17906 M (SumOfSquares is not an integer as required.") S
21600 14306 M (Note that ) S
1200 /Times-BoldItalic-Acnt F
(\(SumOfSquares 1.234 4\)) S
1200 /Times-Roman-Acnt F
( also causes an error because ) S
21600 12506 M (1.234 is not an integer, but a floating point number. ) S
grestore savepage restore showpage

%%Page: 2 2
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (2) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
14400 71106 M (Interlisp does not do this type checking.  You do not have to declare the expected ) S
14400 69306 M (type of a parameter in your function definitions AND Interlisp does not check the ) S
14400 67506 M (type of the arguments when you call the function.) S
18000 64706 M (Example:) S
21600 62706 M (\(DEFINEQ) S
25200 60706 M (\(SumOfSquares) S
28800 58706 M (\(LAMBDA \(X Y\)) S
32400 56706 M (\(PLUS \(TIMES X X\)\(TIMES Y Y\)\)\)\)\)\)) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
18000 53106 M (\(SumOfSquares 2 3\)) S
1200 /Times-Roman-Acnt F
( works fine and returns an integer, 13.) S
1200 /Times-BoldItalic-Acnt F
18000 50306 M (\(SumOfSquares 1.234 4\)) S
1200 /Times-Roman-Acnt F
( also works fine, but returns a floating point ) S
18000 48506 M (number 17.52276.) S
18000 45706 M (But, ) S
1200 /Times-BoldItalic-Acnt F
( \(SumOfSquares 'Foo 4\)) S
1200 /Times-Roman-Acnt F
( will cause an error \(i.e., a BREAK\).) S
18000 43306 M (The error will occur somewhere deep inside the SumOfSquares function ) S
18000 41506 M (and the error message will not reflect the real problem \234 i.e., that the ) S
18000 39706 M (argument to SumOfSquares was of the wrong type.) S
/bitbltsave save def 18000 13899 translate 50500 23100 scale 505 231 true thebitimage
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B3028FB239FFC880
B202222FB339E200
B3022CB230003CB20700E200
B202888CB339C880
B33F
B202222CB339E200
B33F
B202888CB339C880
B33510B308
B202222CB339E200
B33F
B202888CB339C880
B33F
B202222CB339E200
B3357CB308
B202888CB331B20700C880
B33F
B202222CB339E200
B3357A526499E2B304
B202888CB331425294A502B302C880
B336949505B305
B202222CB331739C9719C2B302E200
B335425294A102B304
B202888CB334A5B303C880
B3357B9C6719EF80B303
B202222CB331B20700E200
B33701B306
B202888CB33302B304C880
B3357891F308B305
B202222CB33141D18488B303E200
B3365FB307
B202888CB331736AB305C880
B33543B308
B202222CB331422AB305E200
B3357A24833EB305
B202888CB331B20700C880
B33F
B202222CB339E200
B3357A526499E2B304
B202888CB331425294A502B302C880
B336949505B305
B202222CB331739C9719C2B302E200
B335425294A102B304
B202888CB334A5B303C880
B3357B9C6719EF80B303
B202222CB331B20700E200
B33F
B202888CB339C880
B33579CC8480B305
B202222CB3314092B305E200
B3368287B306
B202888CB3328CE3B20400C880
B336909780B305
B202222CB3329294B304E200
B33541CCE4B306
B202888CB331B20700C880
B33F
B202222CB339E200
B3357891F0B306
B202888CB33141D180B304C880
B3365FB307
B202222CB331736AB305E200
B33543B308
B202888CB331422AB305C880
B3357A24B307
B202222CB331B20700E200
B33920B304
B202888CB339C880
B303387040B32E31D56218E7360CE0C880
B202222C4488B32F4A559225294A1010E200
B305B22E003C0A559205293A1C60E200
B202888CB33132559219290A5280C880
B303787040B32E425A9720E9338C70C880
B202222C4088B32F480092A4B20300E200
B3034488B22E003C30006118B305
B202888C3870B32FB20700C880
B303B23000B30A
B202222CB339E200
B30308B30A08B32411D1F3B306
B202888C10B30A04B32410918480B303C880
B3048041C44F8E005880E2238884B3259580B306
B202222C20804085481100648112444882B326E3B20400E200
B30A4481128408B3269F84B306
B202888CB30402B3021307C8B3269B8480B303C880
B304F040854F0C0064C912844CB3257DD1F3B20400C880
B202222C20804086C8110058B0E2438B02B324B20700E200
B30310B305400002000004B32E
B202888C10F9F1C44F8EB333C880
B30308B20A0008B324408E8F98B305
B202222CB230003C40848C24B303E200
B337AC04B305
B202888CB3317084AF18B303C880
B3354084FC20B305
B202222CB333DC24B303E200
B3357BEE8F98B305
B202888CB331B20700C880
B33F
B202222CB339E200
B335725E8C5CB305
B202888CB3314A508C88B303C880
B33690FD08B305
B202222CB331739C56B304E200
B3354A50B307
B202888FB230FFFC4A505518B303C880
B327F5B20B557C739E2488B305
B202222FB331B20700E200
B327FAB20BAABCB309
B202888FBFF87E1FFFFEFF7C1F7FBFDFEF87DE7B006FF77E0FF7FD7FBE0DFFFF43DFC3C25FA7FFFDB315C880
B304F7BDEFFFFEFE73E77F3FDFCE79DE7B7FEFF779F7FBFB7FB9F5FFFF3DDFBDBCDF67FFFDF5B20B557C7A526499E2B304
B202222FBFEFDBF7FFFEFD77F77EBFDFAEFDDDBBB3027BB202FB7FBBF9FFFF7EDF7FBECEFFB30F425294A502B302E200
B307F0FEFB6FFB7DB0DF6DFEB30477FBFC077FB7FDB304C6D5B302FAB20BAABC42949505B305
B202888FB303FFFEF76FFB7BBFDEEDFEDBDBB303FFFDF7B30601F8DBB310739C9719C2B302C880
B30380B304EF6FFB77BFDDB30300E00F77FFFEEF007781B302CF7DBEDDB302F5B20B557C425294A102B304
B202222FBFF7BDEFB309D7EB7FEFEFB3037F77B202FF3DD5BBDEDEE7B312A5B303E200
B304F87E1FFFFEDF6FFB6FBFDBB305F777FBFF5F7FB7FDFFFF43D9C7E1DF67FFC1FAB20BAABC7B9C6719EF80B303
B202888FBFB203FFFEBF77F75FBFD7EDFECFF3B3027BB303BBB3027FB202FFDFFFFFF9B30DB20700C880
B3097F73E73FBFCFB305EF79F7FFBF7F79F3B308FDF5B20B557CB309
B202222F807FB303FF7C1F7FBFDFEDFEDFFB00601F7E0FFFBF00FE0FB31FE200
B303B223FFFAB20BAABFB207FFE200
B202888FB323B215FFC880
88B237FFE8B2048880
227FB336E2B2042200
2260B2360062B305
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E20387B33468B2048880
88E2044880B33A
2262B33662B2042200
B33F
88E3C4B33568B2048880
88E20387B23400B306
2262B2360062B2042200
2263E0B33C
88E0B2360068B2048880
B33F
2260B33662B2042200
B33F
88E2238880223889F2238700224470B32968B2048880
88E26449802644A902210880224488B330
2262B3064108803E48B32A62B2042200
2262A44A9F2AB3028108002250B8B330
88E2A44A80B302E3C10800147880B32968B2048880
88E3244C803244D902210880144488B330
2263B33662B2042200
2262238880224489F3C38700087870B330
88E0B2360068B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260000002B30580B30980B32162B2042200
B30304B31040B328
88E1C200041C34A8E103868D1E4070E000080E1C0010B32268B2048880
88E2220208224CA9110449932240891000081122001020B328
22622104082244B302489122408020B304F8B32262B2042200
B3020F8804B3020088911E40F8C0B30490B329
88E3C0840818B30203099102648910000FB32668B2048880
88E20082082244D913C446911C5870E001080E1C0050B329
2262204004220001110440B204000108B202005040B32162B2042200
2261C7C0041C0000E0E380B3050F80000030B329
88E0000002B2100080B32168B2048880
B303B23400B306
2260B33662B2042200
B33F
88E3E2020E3E7C40E0B32F68B2048880
88E082021120404110B336
2260810001102021B33062B2042200
B303110810B338
88E0B2360068B2048880
B33F
227FB236FFE2B2042200
B30EFEB228AAB306
88B20DFFB329E8B2048880
B30EFDB2285568B305
227C01BFB007C1FFEFBF6FDE1787EF7DB32862B2042200
227DFFDF77FF3EB303DDE77BEF7EB228AAE2B305
88FDFFEEF7FF7F7FD75F6FDBF6FDB32AE8B2048880
B304FEFFB306D6BDB2285568B305
227DFFF5B302FFB33062B2042200
227C03FBF00EFFFFBAEFB303B6DEB228AAE2B305
88FDFFF5F7FEB30367BDE77BB9B329E8B2048880
B302EEB3027FBAEF687E1787B9DDB2285568B305
227DB302FF7F7F7DF7FFFFF7FFFFFDB32862B2042200
B302DF77FF3EFF7DF77FB303FEB228AAE2B305
88FC01BFB007C1B331E8B2048880
88B20DFFFDB2285568B305
227FB30CB229FFE2B2042200
B23E2200
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200

bitbltsave restore
grestore savepage restore showpage

%%Page: 3 3
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (3) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
18000 71106 M (Note that the error occurs in FTIMES, not in SumOfSquares where it ) S
18000 69306 M (really should have happened.) S
21600 66706 M (In this case, its easy to trace back to see that in fact SumOfSquares ) S
21600 64906 M (has a bad argument.  But if these were complex functions ) S
21600 63106 M (embedded many levels deep, it could be very difficult to figure out ) S
21600 61306 M (where the 'Foo that tripped up the FTIMES actually came from.) S
14400 58106 M (This example points out both the strengths and weaknesses of the Interlisp ) S
14400 56306 M (scheme of no type checking.  ) S
18000 53506 M (The strength is that you can easily write a single function that handles ) S
18000 51706 M (many different kinds of data \233 e.g., both integers and floating numbers.) S
18000 48906 M (The weakness is that data of the wrong type may be passed through many ) S
18000 47106 M (layers of a program before an error is tripped up.  When this happens, it is ) S
18000 45306 M (very difficult to trace where the bad data came from.) S
grestore savepage restore showpage

%%Page: 4 4
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
grestore savepage restore 
%%Page: 5 5
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (4) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
10800 71106 M (Adding type checking to your Interlisp functions) S
1200 /Times-Roman-Acnt F
14400 68106 M (The solution to Interlisp's lack of explicit type checking is to judiciously add type ) S
14400 66306 M (checking to the functions you write.) S
14400 63306 M (The basic goal of type checking is to catch data of the wrong type at the earliest ) S
14400 61506 M (point at which you can detect that it is wrong.  ) S
18000 58706 M (In particular, at any point where new data enters the system \234 e.g., at user ) S
18000 56906 M (type-in or when reading from a database \234 make sure the data is of the type ) S
18000 55106 M (expected.) S
21600 52706 M (For example, if you are getting information from a user to add to ) S
21600 50906 M (the database, check the arguments to the add-to-database function ) S
21600 49106 M (to make sure that the user is entering the correct type of data.) S
18000 46306 M (Also, at any other point where there is a possibilty of a wrong type of data ) S
18000 44506 M (being passed to a function, check the type of the arguments within that ) S
18000 42706 M (function.) S
14400 39506 M (It is important to type check only where necessary because type checking does ) S
14400 37706 M (take some time.) S
18000 35106 M (Too much type checking will make your program very inefficient.) S
18000 32506 M (On the other hand, with too little type checking your program may not run ) S
18000 30706 M (at all.) S
1200 /Times-Bold-Acnt F
10800 27106 M (Type Checking Technique) S
1200 /Times-Roman-Acnt F
14400 24106 M (To check the arguments being passed to a function, just put a COND clause at the ) S
14400 22306 M (beginning of the function.  The COND should have a cluase for each parameter ) S
14400 20506 M (that aborts the function and reports an error to the user if the value of the ) S
14400 18706 M (parameter is not an allowable type \(i.e., if the calling function had an incorrectly ) S
14400 16906 M (typed argument\).) S
grestore savepage restore showpage

%%Page: 6 6
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
grestore savepage restore 
%%Page: 7 7
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (5) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
18000 71106 M (Example:) S
18000 68906 M (\(DEFINEQ) S
21600 66906 M (\(SumOfSquares \(LAMBDA \(X Y\)) S
25200 64906 M (\(COND) S
28800 62906 M (\(\(NOT \(NUMBERP X\)\)) S
32400 60906 M (\(ERROR "Incorrect first argument to ) S
32400 59106 M (SumOfSquares -- must be a number.  But it ) S
32400 57306 M (is --"  X\)\)) S
28800 55306 M (\(\(NOT \(NUMBERP Y\)\)) S
32400 53306 M (\(ERROR "Incorrect second argument to ) S
32400 51506 M (SumOfSquares -- must be a number.  But it ) S
32400 49706 M (is --"\)  Y\)) S
28800 47706 M (\(T) S
32400 45706 M (\(PLUS \(TIMES X X\)\(TIMES Y Y\)\)\)\)\)\)\)) S
/bitbltsave save def 18000 20499 translate 50600 24100 scale 506 241 true thebitimage
B23E2200
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B302BFB239FF8880
B202223FB3392200
B30230B23000F0B20600032200
B20288B0B3398880
B33F
B2022230B3392200
B33F
B20288B0B3398880
B33540B308
B2022230B3392200
B33F
B20288B0B3398880
B33F
B2022230B3392200
B334F1F0B308
B20288B0B330F0B20600038880
B33F
B2022230B3392200
B334F1E949926788B304
B20288B0B331094A529408B3028880
B3350A525414B305
B2022230B331CE725C67B3032200
B335094A5284B305
B20288B0B33494B3038880
B335EE719C67BEB304
B2022230B330F0B20600032200
B33704B306
B20288B0B33308B3048880
B334F1E247CC20B305
B2022230B331074612B3042200
B335057EB307
B20288B0B331CDAAB3058880
B3350DB308
B2022230B33108B3062200
B335E8920CF8B305
B20288B0B330F0B20600038880
B33F
B2022230B3392200
B334F1E949926788B304
B20288B0B331094A529408B3028880
B3350A525414B305
B2022230B331CE725C67B3032200
B335094A5284B305
B20288B0B33494B3038880
B335EE719C67BEB304
B2022230B330F0B20600032200
B33F
B20288B0B3398880
B334F1E73212B306
B2022230B331024AB3052200
B3360A1EB306
B20288B0B332338CB3048880
B336425EB306
B2022230B3324A52B3042200
B335073392B306
B20288B0B330F0B20600038880
B33F
B2022230B3392200
B334F1E247C0B306
B20288B0B3310746B20400038880
B335057EB307
B2022230B331CDAAB3052200
B3350DB308
B20288B0B33108B3068880
B335E892B307
B2022230B330F0B20600032200
B33980B304
B20288B0B3398880
B30381C1B32FC75588639CD833838880
B20222308221B32EF129564894A52840432200
B3034020B32EF0B30214A4E871832200
B20288B042B330C9564864A4294A038880
B30323C1B32EF1096A5C83A4CE31C38880
B20222302201B32F20024A90B20200032200
B30312B22F00F0C0018460B305
B20288B1F3E0B32FB20600038880
B302B0B23000B30A
B2022230B3392200
B30320B30910B325C64B80B306
B20288B040B30908B324F1295A40B3048880
B30343E4488E2200B101C44711B32609B308
B2022230820448912200C90224889104B3267AB3052200
B305891124008902250811B330
B20288B082050A1128B302260F91B326296AB3058880
B30383C78F113C00C992250899B325F0C64B80B306
B2022230820448912200B161C48716B326B20600032200
B30342B304800004000008B32F
B20288B043E78F0E3CB3348880
B30320B2090010B324F1E94992B306
B2022230B23000F1094A52B3042200
B3350A5254B306
B20288B0B331CE725CB3048880
B335094A52B306
B2022230B3392200
B335EE719CB306
B20288B0B330F0B20600038880
B33F
B2022230B3392200
B334F1C97A3170B305
B20288B0B33129423220B3038880
B3352A43F4B306
B2022230B331CE7158B3042200
B3352941B307
B20288BFB230FFB3025460B3038880
B312E1B311BFB30ECE789220B305
B202223FB30EDEB320F0B20600032200
B312BF7FB32A
B20288BF77EF0F87BEFE1F0F3FDEDF879FE12FE170DBDEF0EFDCFF3C3FF83E1B7BDF07EF83F0B86E12FE1E1FFFFFF7BDC370F3FA1FB0B3078880
B304EEF77BBEFDEEF77FDEDF7BBFDE6FDE6F5BDEEF6FDDFF7BDFF7DDEB7BDCF9EF7DEF37ADE6FDEDEFB303BD6F77F9EF71E949926788B304
B202223F77EDFEFDBEFBFDFFB304DF6FBF6F9BDEDFEFDDFF77EFEFEDF37BDDFDEEFEDFB7CDF6FBFDB304BE6F77FBF6F1094A529408B3022200
B30EFBBFE3B302DBB306FFEDFB7BDBFEEFB302EE36FBFFEFE187F7BDBF7FB3030A525414B305
B20288BFB304F80DB30387BFFCB304C06FB304DDB304FDDFB7EFC6F80E1FFFFFB30270F7FBF631CE725C67B3038880
B305F6FD9E7BEDF77FDECF7FBFDF67B303DFB304F83DB30483DFB7EDF67BEDB202FFB3026FB302F1094A5284B305
B202223F73DEF77BAAADDEB302D57BBFEF6ADE6FD9CEEEE7BDFF7BDFF7FDFB39B3027FEF37EEF6ADDDEFFFFFF39DBF6F77F9EF71B30294B3032200
B303743F0F87B4B2CE3F0E3F86D9871FF0ECE16FDA31F1E878FE3C3FEFEDFB463BFEC2FEF0B7EF0ECE3E1FFFFFF463BF70E3FA1FB1EE719C67BEB304
B20288BF7FB206FF7FDFFFFFBFB207FFFDFF7FFFEFEFFFFFFDFDEEFEB20CFFF7FBFFF0B20600038880
B30CDEB30EF39FFFFFFCF9EF39B31A
B202223FB307FFE6B20EFFFC7FB202FF07F3C7B30CFFB30A2200
B303B239FF2200
B20288BFB3398880
88B237FFE8B2048880
227FB336E2B2042200
2260B2360062B305
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E20387B33468B2048880
88E2044880B33A
2262B33662B2042200
B33F
88E3C4B33568B2048880
88E20387B23400B306
2262B2360062B2042200
2263E0B33C
88E0B2360068B2048880
B33F
2260B33662B2042200
B33F
88E3C3430004180021C0B32E68B2048880
88E224C4800424002220B335
22622444000420002040B32E62B2042200
B30721800F9FB333
88E3C4B3042220B22E0068B2048880
88E2444F001C7800E1C0B335
22624004000020B2310062B2042200
226380000004000020B336
88E0B2360068B2048880
B33F
2260B30E07B30D80B31762B2042200
B3100080B32C
88E1C4470E204070E0C0040220383001E4068D2A3888600187001C34A8E103868D1E4070E0B3022A3470600587001E0088D2A5871008000068B2048880
88E08448912040891120B3024448022409932A448890024880224CA91104499322408910B3034C889006488022008932A64890B309
22608448112040810100B3020840022408912A4088800208802244B302489122408020B303441080044800B30212A44810B2020062B2042200
B306F9B304304001E4B3027CB30404B3020088911E40F8C007CF802A446080044F801EB3034F90B309
88E086489132648911B302324440002649912A44C8B30318B30203099102648910B202002A4488800648800200C912A64899B30268B2048880
88E085870E2C5870E3C00F0E2C38F001C586913638B1E00787002244D913C446911C5870E0B302364471E00587001C00B113658716B309
226080B20400010004B2020040B2060080020000220001110440B20A008004B2050004B2040062B2042200
2261C0B30400000382B20D001C0000E0E380B30A00B313
88E0B2360068B2048880
B33F
2260000002B30580B30980B32162B2042200
B30304B31040B328
88E10080041C34A8E103868D1E4070E000080E1C0010B32268B2048880
B3028208224CA9110449932240891000081122001020B328
226087C4082244B302489122408020B304F8B32262B2042200
2260848F8804B3020088911E40F8C0B30490B329
88E044840818B30203099102648910000FB32668B2048880
88E04282082244D913C446911C5870E001080E1C0050B329
2260228004220001110440B204000108B202005040B32162B2042200
2263E180041C0000E0E380B3050F80000030B329
88E0000002B2100080B32168B2048880
B303B23400B306
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
2260B33662B2042200
B33F
88E0B33668B2048880
B33F
227FB236FFE2B2042200
B30EFEB228AAB306
88B20DFFB329E8B2048880
B30EFDB2285568B305
227C01BFB007C1FFEFBF6FDE1787EF7DB32862B2042200
227DFFDF77FF3EB303DDE77BEF7EB228AAE2B305
88FDFFEEF7FF7F7FD75F6FDBF6FDB32AE8B2048880
B304FEFFB306D6BDB2285568B305
227DFFF5B302FFB33062B2042200
227C03FBF00EFFFFBAEFB303B6DEB228AAE2B305
88FDFFF5F7FEB30367BDE77BB9B329E8B2048880
B302EEB3027FBAEF687E1787B9DDB2285568B305
227DB302FF7F7F7DF7FFFFF7FFFFFDB32862B2042200
B302DF77FF3EFF7DF77FB303FEB228AAE2B305
88FC01BFB007C1B331E8B2048880
88B20DFFFDB2285568B305
227FB30CB229FFE2B2042200
B23E2200
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F
B23E8880
B33F
B23E2200
B33F

bitbltsave restore
18000 16606 M (Second Example:) S
21600 13006 M (Define a function to return the tail of a list starting from its second ) S
21600 11206 M (to last element.) S
grestore savepage restore showpage

%%Page: 8 8
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
grestore savepage restore 
%%Page: 9 9
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (6) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
21600 71106 M (\(DEFINEQ) S
25200 69106 M (\(SecondFromLast \(LAMBDA \(List\)) S
28800 67106 M (\(* * Return the tail of a list starting from its second ) S
28800 65306 M (to last element.   Make sure List is in fact a list and ) S
28800 63506 M (is of length 2 or more.\)) S
28800 60506 M (\(COND) S
32400 58506 M (\(\(NOT \(LISTP List\)\)) S
36000 56506 M (\(ERROR "SecondFromLast: ) S
36000 54706 M (Argument must be a list.  It is --" ) S
36000 52906 M (List\)\)) S
32400 50906 M (\(\(LESSP \(LENGTH List\) 2\)) S
36000 48906 M (\(ERROR "SecondFromLast: List ) S
36000 47106 M (argument must be at least 2 items ) S
36000 45306 M (long.  Its current length is --" ) S
36000 43506 M (\(LENGTH List\)\)\)) S
32400 41506 M (\(T) S
36000 39506 M (\(NTH List \(DIFFERENCE ) S
36000 37706 M (\(LENGTH List\) 2\)\)\)\)\)\)\)) S
/bitbltsave save def 18000 9899 translate 49600 25100 scale 496 251 true thebitimage
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
227FB23AFFA2
B33D
88E0B22F0001E0B207000188
B33D
2260B33AA2
B33D
88E0B33A88
B33D
2260B33180B307A2
B33D
88E0B33A88
B33D
2260B33AA2
B33D
88E0B330E3E0B30788
B332E0B207000188
2260B33AA2
B33D
88E0B330E3D29324CF10B30388
B332E21294A528B305
2260B33114A4A8B305A2
B332E39CE4B8CEB305
88E0B330E21294A508B30488
B33628B305
2260B330E3DCE338CF7CB303A2
B332E0B2070001A2
88E0B33308B30588
B33510B306
2260B330E3C48F9840B304A2
B332E20E8C24B306
88E0B3310AFCB30688
B332E39B54B307
2260B330E21BB307A2
B33311B308
88E0B330E3D12419F0B30488
B332E0B207000188
2260B33AA2
B33D
88E0B330E3D29324CF10B30388
B332E21294A528B305
2260B33114A4A8B305A2
B332E39CE4B8CEB305
88E0B330E21294A508B30488
B33628B305
2260B330E3DCE338CF7CB303A2
B332E0B2070001A2
88E0B33A88
B33D
2260B330E3CE6424B305A2
B332E20494B307
88E0B332143CB30588
B3346718B306
2260B33284BCB305A2
B33494A4B306
88E0B3310E6724B30588
B332E0B207000188
2260B33AA2
B33D
88E0B330E3C48F80B30588
B332E20E8CB205000188
2260B3310AFCB306A2
B332E39B54B307
88E0B330E21BB30788
B33311B308
2260B330E3D124B306A2
B332E0B2070001A2
88E0B33A88
B33D
22610382B32EE18C6324E84195F37841A2
22610442B32EE25094A52842558484A1A2
88E08040B32EE05C84B30383988188
88E083C0B32EE19294A52E4A5580A08188
22604442B32EE20C6338E8719A831DC1A2
B333400000280000800081A2
88E02440B32EE18000002FB3030188
88E3E380B32EE0B207000188
2260B22F00B30AA2
B33D
88E040B30920B324E18C97B30688
88E080B30910B324E252B4B480B306
226087C8911C44016203888E22B32612B307A2
2261040891224401920449112208B326F4B307
88E104091222480112044A10B33088
B3020A142250B3024C1FB32752D4B307
2261078F1E22780193244A1132B325E18C97B2050001A2
226104089122440162C3890E2CB325E0B2070001A2
88E084B304000008000010B32E88
88E087CF1E1C78B336
226040B2090020B324E3D29324B305A2
2260B22F0001E21294A4B306
88E0B33114A4A8B30588
B332E39CE4B8B306
2260B330E21294A4B305A2
B33D
88E0B330E3DCE338B30588
B332E0B207000188
2260B33AA2
B33D
88E0B330E392F462E0B30488
B332E252846440B305
2260B3315487E8B305A2
B332E39CE2B0B306
88E0B330E25282B30688
88B231FFB302A8C0B305
227FB316E1B318E39CF12440B304A2
B318DEB318E0B2070001A2
88B217FFBF7FB32188
88FF07E1F0F87BF785BFEFE1EF7B00E130F33FC03B879FE12FE170DBDEF0EFDCFEF7B86E1E7F43F0FF84CFF78784C3CFE03FDCB30A
227EFBDEEF77BBF779BFEFDEEF7B7FDE6F773FDFFB7BBFDE6FDE6F5BDEEF6FDDFEF7B7ADEEFF3DEF7F79DFF77B79BDDFEFFFDDE3D29324CF10B303A2
227DFDBFDFEFDBF6FDBFEFBF6F7B7FDF6F77FFB303DF6FBF6F9BDEDFEFB303CDEEFF7EDFFF7DDFF6FF7DBDDFF7FFDDE21294A528B305
88FFB30CE37FB303FBBFE3B302DBB306EFB3048DB3028DFDDFFBB30214A4A8B30588
88FFFB80B30AFC70F7B30287BFFCB304C06FB303EE1EFF7EC07FF1DFF603F1C3DFFCFFDDE39CE4B8CEB305
227F07BEDF6FB30280E7B303DF6FB3037FBFDF67B303DFB304EDFEFF7EDF7F7DDFF6FB7DBFDFFF7FDDE21294A508B304A2
227EFFDDEF77B9EF79BFEADEE73B7FEF6F773FDFFB7BBFEF6ADE6FD9CEEEE7BDFE73B7EDEEFF3DEEFFBDDFF777BDBDDFFFBFB30428B305
88FDFDE3F0F87A1F85BFECE1E8C77FF0F0E3B302871FF0ECE16FDA31F1E878FE8C77EE1C7F43F1FFC38FF78FC3C38FEFBFD8E3DCE338CF7CB30388
B302B204FFFDBFB203FF7FFFFFF7FFDFFFFFBFB207FFFDB203FFFEFF7FB202FFDFF7B202FFDFEFBFFDE0B207000188
227E73B310FBB31AF77FDDB309A2
227F8FB305807FB305FFB303B20FFFB303FFB303FFF8FFDFB30A
88B23BFF88
B33D
B202222FB336FE2222
B33D
B202888CB236000C8888
B33D
B202222CB3360E2222
B33D
B202888CB3360C8888
B33D
B202222CB3360E2222
B33D
B202888CB3360C8888
B33D
B202222CB3360E2222
B33D
B202888CB3360C8888
B33D
B202222CB3360E2222
B33D
B202888CB3360C8888
B3037CB338
B202222C10B3350E2222
B33D
B202888CB3360C8888
B33D
B202222C50B3350E2222
B30330B338
B202888C10B3350C8888
B303B23600B302
B202222CB3360E2222
B30F0EB32C
B202888CB30B01B3290C8888
B303187001C348101C44300043888D0C440021C0B327
B202222C24880224C810224448004448931244002220B3240E2222
B303201002044810204440004408911044002040B327
B202888C2060B3033EB30247C8B30321800F9FB3220C8888
B3048802244C9922644000444C931064002220B22400B302
B202222C787001C44B161C58F000438B0D3C5800E1C0B3240E2222
B30320B2060040004000001040B22700B302
B202888CB2080001C0B20200400020B3250C8888
B30CB22D00B302
B202222CB3360E2222
B3171CB31DE0B305
B202888CB31302B31D10B3020C8888
B3033870E1C446902038A9F1E38304007C10E0C007901A34A8E22180151A383002C3800F0C0010E1E383003E001061C54700043888D080000EB302
B202222C4489122449902044A90224448400401111200890264CA912224015264448032440111200111224448020001092254880044489308000040E2222
B30481022448B304208400004010210008902244A902220015220840022400111000110220840010001082054100B3021000B304
B202888C08F9B30601E304B303C10007B303F2B30330400227C00FB302F1E3040008001083E546B3070C8888
B30330891226499E3244A900244404004011110000992644A913B303444003244001B30210244400040010822548800444C930B305
B202222C4470E1C586902C38D901C38FB30270E3C007161A44D8E2C7801B2238F002C3800E3C0010E1C38F00220071E1C6C7000438B0D0B3020E2222
B304B20300900000010000040000400001B2060002B203004002B20200100010000004B3020080B2020004B20400B303
B202888C38B3039FB304B202004010B20D00B303000070B203001C0010B203001CB3040E0C8888
B303B23600B302
B202222CB3360E2222
B30640B30C40B3040102B320
B202888CB30280B30C80B3040081B31D0C8888
B30320700083870E1C446902038A9F1E38300087C70E080070E0B321
B202222C20884104489122449902044A9022444801040211080089104080B31C0E2222
B303108881044810224489B3040840B30508B322
B202888C1089F1008F90B3061E30B30302080089B31F0C8888
B303087081030891226499E3244A900244B3030C0800F1E0B321
B202222C08884104470E1C586902C38D901C38F0B3021108008100B31E0E2222
B3030488008440B2020009B20200100000400084B30581B21D00B302
B202888C7C70008380B303F0B304000084070E3E00F9F0B31E0C8888
B303B2020040B20C0040B204000102B320
B202222CB302B233000E2222
B33D
B202888CB3360C8888
B3032070B337
B202222C208840B3330E2222
B303108880B336
B202888C1089F0B3330C8888
B303B23600B302
B202222CB3360E2222
B3022FB236FFFE2222
B202888FB30DD5B227555C8888
B33D
B202222FB30DB228AAAE2222
B3038037F600F83FFDF7EDFBC2F0FDEFB32B
B202888FBFFBEEFFE7DFB303BCEF7DEFD5B227555C8888
B304FDDEFFEFEFFAEBEDFB7EDFBDB32C
B202222FB303DFB306BAD7B228AAAE2222
B304FEBEFFDFFFB333
B202888F807F7E01DFFFF75DB303B6DBD5B227555C8888
B303BFFEBEFFB303ECF7BCEF773BB32B
B202222FBFFDDEFFDFEFF75DED0FC2F0F73BB228AAAE2222
B307B202EFBEFFFFFEB202FFB32B
B202888FBFFBEEFFE7DFEFBEEFB304D5B227555C8888
B3038037F600F83FB333
B202222FB20DFFB228AAAE2222
B311B228FFFE2222
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88
B33D
B23D22
B33D
B23D88

bitbltsave restore
grestore savepage restore showpage

%%Page: 10 10
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (7) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
10800 71106 M (Type checking predicates) S
1200 /Times-Roman-Acnt F
14400 67506 M (The predicates necessary for checking the type of a given piece of data have ) S
14400 65706 M (already been discussed.) S
18000 62106 M (LispLecture #4 \(page 3\),  discusses the predicates ) S
1200 /Times-Bold-Acnt F
(LITATOM) S
1200 /Times-Roman-Acnt F
(, ) S
1200 /Times-Bold-Acnt F
18000 60306 M (NUMBERP) S
1200 /Times-Roman-Acnt F
(, and ) S
1200 /Times-Bold-Acnt F
(LISTP) S
1200 /Times-Roman-Acnt F
( that check if their argument is of type litatom, ) S
18000 58506 M (number, and list, respectively.) S
18000 54906 M (LispLecture #25 \(page 13\) discusses the ) S
1200 /Times-Bold-Acnt F
(TYPE?) S
1200 /Times-Roman-Acnt F
( statement that allows one ) S
18000 53106 M (to build predicates that check if their argument is a particular type of ) S
18000 51306 M (RECORD or a particular DATATYPE.) S
14400 47706 M (The next section contains an overview of the types of data in Interlisp, including ) S
14400 45906 M (the predicates that check for each of the types.) S
grestore savepage restore showpage

%%Page: 11 11
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
grestore savepage restore 
%%Page: 12 12
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (8) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 70957 M (Overview of the Types of Data in Interlisp) S
1200 /Times-Roman-Acnt F
10800 67506 M (Below is a list of the types of data supported by Interlisp.  In parentheses following each ) S
10800 65706 M (data type is the predicate that checks for that data type.) S
14400 62106 M (Primitive data types \(those provided as part of the core Interlisp system\).) S
18000 59106 M (Atoms ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(\(ATOM\)) S
1200 /Times-Roman-Acnt F
21600 56506 M (Litatoms ) S
1200 /Times-Italic-Acnt F
(\(LITATOM\)) S
1200 /Times-Roman-Acnt F
21600 53906 M (Numbers ) S
1200 /Times-Italic-Acnt F
(\(NUMBERP\)) S
1200 /Times-Roman-Acnt F
25200 51506 M (Integers ) S
1200 /Times-Italic-Acnt F
(\(FIXP\)) S
1200 /Times-Roman-Acnt F
25200 49106 M (Floating Point Numbers ) S
1200 /Times-Italic-Acnt F
(\(FLOATP\)) S
1200 /Times-Roman-Acnt F
18000 46106 M (Lists ) S
1200 /Times-Italic-Acnt F
(\(LISTP\)) S
1200 /Times-Roman-Acnt F
21600 43706 M ([Prop Lists]) S
21600 41306 M ([Assoc Lists]) S
18000 38306 M (Strings \(STRINGPs\)) S
18000 35306 M (Arrays \(ARRAYPs\)) S
14400 31706 M (Compound data types \(those built by combining primitive data types\)) S
18000 28706 M (RECORDs) S
21600 26106 M (RECORDs defined by the Interlisp implementors) S
25200 23706 M (SKETCHs ) S
1200 /Times-Italic-Acnt F
(\(TYPE? SKETCH\)) S
1200 /Times-Roman-Acnt F
25200 21306 M (GRAPHs ) S
1200 /Times-Italic-Acnt F
(\(no type checking predicate!\)) S
1200 /Times-Roman-Acnt F
25200 18906 M (...) S
21600 16306 M (User defined RECORDs  ) S
1200 /Times-Italic-Acnt F
(\(TYPE? ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(RecordName) S
1200 /Times-Italic-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
18000 13306 M (DATATYPEs) S
21600 10706 M (DATATYPEs defined by the Interlisp implementors) S
25200 8306 M (BITMAPs ) S
1200 /Times-Italic-Acnt F
(\(BITMAPP\)) S
grestore savepage restore showpage

%%Page: 13 13
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
53400 75600 M (9) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
25200 71106 M (HARRAYs ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(\(HARRAYP\)) S
1200 /Times-Roman-Acnt F
25200 68706 M (WINDOWs ) S
1200 /Times-Italic-Acnt F
(\(WINDOWP\)) S
1200 /Times-Roman-Acnt F
25200 66306 M (PROCESSes ) S
1200 /Times-Italic-Acnt F
(\(PROCESSP\)) S
1200 /Times-Roman-Acnt F
25200 63906 M (STREAMs ) S
1200 /Times-Italic-Acnt F
(\(STREAMP\)) S
1200 /Times-Roman-Acnt F
25200 61106 M (...) S
21600 58706 M (User defined DATATYPEs  ) S
1200 /Times-Italic-Acnt F
(\(TYPE? ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(DataTypeName) S
1200 /Times-Italic-Acnt F
(\)) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 54957 M (Print Names) S
1200 /Times-Roman-Acnt F
10800 51506 M (Every data object in Interlisp has something called a ) S
1200 /Times-BoldItalic-Acnt F
(print name) S
1200 /Times-Roman-Acnt F
( \(often called a ) S
1200 /Times-BoldItalic-Acnt F
(pname) S
1200 /Times-Roman-Acnt F
(\).) S
10800 48106 M (A data object's print name is the thing that gets printed when Lisp needs to communicate ) S
10800 46306 M (with the outside world \233 e.g., in the PRINT phase of the READ-EVAL-PRINT loop.) S
10800 42906 M (Examples:) S
1200 /Times-Bold-Acnt F
14400 40506 M (Atoms) S
1200 /Times-Roman-Acnt F
(: the print name is the name of the atom. E.g., ) S
1200 /Times-Italic-Acnt F
(FOOBAR) S
1200 /Times-Roman-Acnt F
(.) S
1200 /Times-Bold-Acnt F
14400 38106 M (Lists) S
1200 /Times-Roman-Acnt F
(: the print name starts with a "\(", followed by the print names of all of the ) S
14400 36306 M (items in the list separated by spaces, followed by a "\)".  E.g., ) S
1200 /Times-Italic-Acnt F
(\(1 \(2 3\) A\)) S
1200 /Times-Roman-Acnt F
(.) S
1200 /Times-Bold-Acnt F
14400 33906 M (DATATYPES) S
1200 /Times-Roman-Acnt F
(: the print name is  the DatatypeName in "{ }" followed by some ) S
14400 32106 M (numbers. E.g., ) S
1200 /Times-Italic-Acnt F
({WINDOW}#65,12345 ) S
1200 /Times-Roman-Acnt F
(and) S
1200 /Times-Italic-Acnt F
( {PROCESS}#12,12399) S
1200 /Times-Roman-Acnt F
10800 28706 M (Print names are NOT unique.) S
14400 26506 M (For example:) S
1200 /Times-Italic-Acnt F
18000 24306 M ({WINDOW}#65,1234) S
1200 /Times-Roman-Acnt F
( is the print name for some window.  But it is also ) S
18000 22506 M (the print name for an atom whose name \(i.e., print name\) is exactly) S
1200 /Times-Italic-Acnt F
( ) S
18000 20706 M ({WINDOW}65,1234) S
1200 /Times-Roman-Acnt F
(.) S
10800 17506 M (For some data types, the Lisp object can be referred to by typing its print nameinto the ) S
10800 15706 M (Lisp Exec.) S
14400 13506 M (For example, to refer to an atom, you just type its print name \(i.e., its name\) into ) S
14400 11706 M (the Lisp Exec.) S
grestore savepage restore showpage

%%Page: 14 14
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (10) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
10800 71106 M (For other data types, the print name is just for printing; you can't type it back into the ) S
10800 69306 M (Lisp exec to refer to the object.) S
14400 66706 M (For example, if you type in ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
({WINDOW}#65,12345) S
1200 /Times-Roman-Acnt F
( into the Lisp Exec, the Lisp ) S
14400 64906 M (Exec will think you mean the atom by that name, not the window that has that ) S
14400 63106 M (pname.) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 59357 M (Arrays) S
1200 /Times-Roman-Acnt F
10800 56506 M (An array is a primitive data type that represents a fixed number \(N\) of other Interlisp ) S
10800 54706 M (objects stored in a one-dimensional vector.) S
/Helvetica /Helvetica-Acnt encodefont
1200 /Helvetica-Acnt F
25900 51630.0 M (An Array with 7 Elements) S
1800 /Helvetica-Acnt F
24349.5 46796.0 M (1:) S
3399 199 26601 46001 0 R
3399 199 40201 46001 0 R
199 13399 26801 49201 0 R
199 13399 26801 46001 0 R
1000 /Helvetica-Acnt F
30888.0 47421.0 M (\(1 2 3 \(3 4\)\)) S
3399 199 26601 42801 0 R
3399 199 40201 42801 0 R
199 13399 26801 46001 0 R
199 13399 26801 42801 0 R
1000 /Helvetica-Acnt F
32666.0 44221.0 M (444) S
1800 /Helvetica-Acnt F
24349.5 43596.0 M (2:) S
3399 199 26601 39601 0 R
3399 199 40201 39601 0 R
199 13399 26801 42801 0 R
199 13399 26801 39601 0 R
1000 /Helvetica-Acnt F
31860.5 41021.0 M (FooBar) S
1800 /Helvetica-Acnt F
24349.5 40396.0 M (3:) S
3399 199 26601 36401 0 R
3399 199 40201 36401 0 R
199 13399 26801 39601 0 R
199 13399 26801 36401 0 R
1000 /Helvetica-Acnt F
29163.5 37821.0 M ({WINDOW}#1,2234) S
1800 /Helvetica-Acnt F
24349.5 37196.0 M (4:) S
3399 199 26601 33201 0 R
3399 199 40201 33201 0 R
199 13399 26801 36401 0 R
199 13399 26801 33201 0 R
1000 /Helvetica-Acnt F
29610.0 34621.0 M (\(List of Elements\)) S
1800 /Helvetica-Acnt F
24349.5 33996.0 M (5:) S
3399 199 26601 30001 0 R
3399 199 40201 30001 0 R
199 13399 26801 33201 0 R
199 13399 26801 30001 0 R
1000 /Helvetica-Acnt F
31971.0 31421.0 M (1.2345) S
1800 /Helvetica-Acnt F
24349.5 30796.0 M (6:) S
3399 199 26601 26801 0 R
3399 199 40201 26801 0 R
199 13399 26801 30001 0 R
199 13399 26801 26801 0 R
1000 /Helvetica-Acnt F
28912.5 28221.0 M ({PROCESS}#1,2234) S
1800 /Helvetica-Acnt F
24349.5 27596.0 M (7:) S
1200 /Times-Roman-Acnt F
14400 23706 M (Think of an array as a set of mailboxes arranged in one column and N rows.  In ) S
14400 21906 M (each mailbox is some arbitrary Interlisp object \(an atom, a list, a window, etc.\)  ) S
14400 20106 M (You can get at any object stored in the array of mailboxes only by specifying the ) S
14400 18306 M (row number of the mailbox it is stored in.) S
14400 15506 M (Alternatively, an array is like a RECORD with N fields, but the fields can be ) S
14400 13706 M (accessed by ) S
1200 /Times-Italic-Acnt F
(number only) S
1200 /Times-Roman-Acnt F
( and ) S
1200 /Times-Italic-Acnt F
(not by) S
1200 /Times-Roman-Acnt F
( ) S
1200 /Times-Italic-Acnt F
(name) S
1200 /Times-Roman-Acnt F
(.) S
14400 10906 M (An array is also like a list, but it has a fixed length: you can't add or remove ) S
14400 9106 M (elements from an array.) S
grestore savepage restore showpage

%%Page: 15 15
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (11) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
18000 71106 M (Moreover, you can't deal with parts of the array as a single entity as you ) S
18000 69306 M (can a list \(e.g., there is no operation like CDR for arrays\).) S
10800 66506 M (For certain applications, arrays are much more efficient than lists.) S
14400 64306 M (In general, however, any program that uses arrays can be rewritten using lists \233 ) S
14400 62506 M (with possible loss of efficiency and elegance.) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
10800 58757 M (Array manipulation functions) S
1200 /Times-Roman-Acnt F
14400 55106 M (Interlisp has a number of functions that allow you to manipulate arrays, i.e., to ) S
14400 53306 M (create arrays, to access the objects stored in an array, etc.) S
1200 /Times-Bold-Acnt F
14400 49706 M (Creating arrays) S
18000 46106 M (\(ARRAY ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Size) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Creates an array of size ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(Size) S
1200 /Times-Roman-Acnt F
( \(i.e., with ) S
1200 /Times-Italic-Acnt F
(Size) S
1200 /Times-Roman-Acnt F
( entries\).  ) S
18000 44306 M (Returns \(a pointer to\) the array.  The array is initialized to have every ) S
18000 42506 M (element contain NIL.) S
21600 40506 M (Example:) S
25200 38506 M (1_\(SETQ MyArray \(ARRAY 10\)\)) S
1200 /Times-Italic-Acnt F
25200 36506 M ({ARRAY}#65,51054) S
1200 /Times-Roman-Acnt F
25200 34506 M (2_MyArray) S
1200 /Times-Italic-Acnt F
25200 32506 M ({ARRAY}#65,51054) S
1200 /Times-Bold-Acnt F
14400 28906 M (Array predicate) S
18000 25306 M (\(ARRAYP ) S
1200 /Times-BoldItalic-Acnt F
(Arg) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
( if ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
( is an array, NIL otherwise.) S
21600 23306 M (Examples:) S
25200 21306 M (3_\(ARRAYP MyArray\)) S
1200 /Times-Italic-Acnt F
25200 19306 M ({ARRAY}#65,51054) S
1200 /Times-Roman-Acnt F
25200 17306 M (4_\(ARRAYP 10\)) S
1200 /Times-Italic-Acnt F
25200 15306 M (NIL) S
1200 /Times-Roman-Acnt F
25200 13306 M (5_ \(ARRAYP \(LIST 1 2 3 4 5\)\)) S
1200 /Times-Italic-Acnt F
25200 11306 M (NIL) S
1200 /Times-Roman-Acnt F
25200 9306 M (6_ \(ARRAYP 'ARRAY\)) S
grestore savepage restore showpage

%%Page: 16 16
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (12) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
25200 71106 M (NIL) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
14400 67506 M (Accessing the entries of an array) S
18000 63906 M (\(SETA ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Array N) S
1200 /Times-Bold-Acnt F
( ) S
1200 /Times-BoldItalic-Acnt F
(Value) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Sets the ) S
1200 /Times-Italic-Acnt F
(N) S
1200 /Times-Roman-Acnt F
(th element of ) S
1200 /Times-Italic-Acnt F
(Array) S
1200 /Times-Roman-Acnt F
( to have the value ) S
1200 /Times-Italic-Acnt F
18000 62106 M (Value) S
1200 /Times-Roman-Acnt F
( \(i.e., puts the Lisp object specified by ) S
1200 /Times-Italic-Acnt F
(Value) S
1200 /Times-Roman-Acnt F
( into the ) S
1200 /Times-Italic-Acnt F
(N) S
1200 /Times-Roman-Acnt F
(th element of ) S
1200 /Times-Italic-Acnt F
18000 60306 M (Array) S
1200 /Times-Roman-Acnt F
(\).) S
21600 58306 M (Examples:) S
25200 56306 M (7_\(SETA MyArray 1 \(LIST 1 2 3\)\)) S
1200 /Times-Italic-Acnt F
25200 54306 M (\(1 2 3\)) S
1200 /Times-Roman-Acnt F
25200 52306 M (8_\(SETA MyArray 2 \(PLUS 2 3\)\)) S
1200 /Times-Italic-Acnt F
25200 50306 M (5) S
1200 /Times-Roman-Acnt F
25200 48306 M (9_ \(SETA MyArray 12 15\)) S
1200 /Times-Italic-Acnt F
25200 46306 M (ILLEGAL ARG) S
25200 44306 M (12) S
1200 /Times-Roman-Acnt F
25200 42306 M (10_ \(SETA MyArray 3 15\)) S
1200 /Times-Italic-Acnt F
25200 40306 M (15) S
1200 /Times-Bold-Acnt F
18000 36706 M (\(ELT ) S
1200 /Times-BoldItalic-Acnt F
(Array N) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns the Lisp object stored in the ) S
1200 /Times-Italic-Acnt F
(N) S
1200 /Times-Roman-Acnt F
(th element of ) S
1200 /Times-Italic-Acnt F
18000 34906 M (Array) S
1200 /Times-Roman-Acnt F
(.) S
21600 32906 M (Examples:) S
25200 30906 M (11_\(ELT MyArray 1\)) S
1200 /Times-Italic-Acnt F
25200 28906 M (\(1 2 3\)) S
1200 /Times-Roman-Acnt F
25200 26906 M (12_\(ELT MyArray 2\)) S
1200 /Times-Italic-Acnt F
25200 24906 M (5) S
1200 /Times-Roman-Acnt F
25200 22906 M (13_ \(ELT MyArray 12\)) S
1200 /Times-Italic-Acnt F
25200 20906 M (ILLEGAL ARG) S
25200 18906 M (12) S
1200 /Times-Roman-Acnt F
25200 16906 M (14_ \(ELT MyArray 5\)) S
1200 /Times-Italic-Acnt F
25200 14906 M (NIL) S
1200 /Times-Bold-Acnt F
14400 11306 M (Finding out the size of an array) S
grestore savepage restore showpage

%%Page: 17 17
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (13) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
18000 71106 M (\(ARRAYSIZE ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Array) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns the size of array ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(Array) S
1200 /Times-Roman-Acnt F
(.) S
21600 69106 M (Example:) S
25200 67106 M (15_\(ARRAYSIZE MyArray\)) S
1200 /Times-Italic-Acnt F
25200 65106 M (10) S
1200 /Times-Roman-Acnt F
25200 63106 M (16_ \(ARRAYSIZE \(ARRAY 50\)\)) S
1200 /Times-Italic-Acnt F
25200 61106 M (50) S
1400 /Times-Bold-Acnt F
10800 57357 M (Using arrays) S
1200 /Times-Roman-Acnt F
14400 53706 M (Problem:) S
18000 51506 M (Imagine you work for a company that has 20 products \(numbered 1 thru ) S
18000 49706 M (20\).  Each product has a "list price" and an "our price". ) S
18000 46906 M (1.  Write a function that takes a product number and returns the "list ) S
18000 45106 M (price".) S
18000 42906 M (2.  Write a function that takes a product number and returns the "our ) S
18000 41106 M (price".) S
18000 38906 M (3.  Write a function that replaces the price entry field with the atom ) S
18000 37106 M (OutOfStock for a given product number.) S
14400 33506 M (Solution:) S
18000 29906 M (Store the data in an array of size 20, where each entry is a RECORD ) S
18000 28106 M (called ) S
1200 /Times-Italic-Acnt F
(Prices) S
1200 /Times-Roman-Acnt F
( with 2 fields named ) S
1200 /Times-Italic-Acnt F
(ListPrice) S
1200 /Times-Roman-Acnt F
( and ) S
1200 /Times-Italic-Acnt F
(OurPrice) S
1200 /Times-Roman-Acnt F
(.) S
21600 24506 M (\(SETQ PriceArray \(ARRAY 20\)\)) S
21600 20906 M (\(SETA PriceArray 1 \(CREATE Prices ListPrice _ 1.00 OurPrice ) S
21600 19106 M (1.25\)\)) S
21600 15506 M (...  ) S
1200 /Times-Italic-Acnt F
({Fill in rest of proce array with values}) S
1200 /Times-Roman-Acnt F
21600 11906 M (\(DEFINEQ) S
25200 9906 M (\(LC.ListPrice \(LAMBDA \(ProductNumber\)) S
grestore savepage restore showpage

%%Page: 18 18
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (14) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
28800 71106 M (\(fetch \(Prices ListPrice\) of) S
32400 69106 M (\(ELT PriceArray ProductNumber\)\)\)) S
25200 67106 M (\(LC.OurPrice \(LAMBDA \(ProductNumber\)) S
28800 65106 M (\(fetch \(Prices OurPrice\) of) S
32400 63106 M (\(ELT PriceArray ProductNumber\)\)\)) S
25200 61106 M (\(LC.MarkOutOfStock \(LAMBDA \(ProductNumber\)) S
28800 59106 M (\(SETA PriceArray ProductNumber 'OutOfStock\)\)\)\)) S
14400 55506 M (The advantage of using an array in this case is that you need to get to and ) S
14400 53706 M (CHANGE any element of the data structure at any time.) S
18000 51306 M (This is easy with arrays using ELT and SETA.) S
18000 48706 M (It is harder with lists.) S
21600 46306 M (First, \(CAR \(NTH List N\)\) takes longer than \(ELT Array N\).) S
21600 43906 M (Second, there is no easy way to do SETA with list structures.  ) S
21600 42106 M (\(Though we will learn how to do so not easily later!!!\).) S
grestore savepage restore showpage

%%Page: 19 19
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
grestore savepage restore 
%%Page: 20 20
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (15) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 70957 M (Strings) S
1200 /Times-Roman-Acnt F
10800 68106 M (Strings are a primitive data type in Interlisp used for representing sequences of ) S
10800 66306 M (characters.  \(As opposed to atoms which are used as symbols for arbitrary objects.\)) S
10800 63506 M (A string is an arbitrary sequence of characters, including spaces and tabs.) S
10800 60706 M (The print name of a string encloses the characters in the string in double quotes.) S
14400 57906 M (Examples:) S
18000 55706 M ("B") S
18000 53506 M ("abc") S
18000 51306 M ("Frank G. Halasz") S
18000 49106 M ("This is a very long string.  It consists of several sentences.  The sentences ) S
18000 47306 M (are separated by spaces.") S
10800 44106 M (Strings can be from 0 to any number of characters in length.) S
14400 41506 M (The string "" is the empty string having 0 characters.) S
10800 38306 M (Strings can contain any characters except the double quote character and %.) S
14400 35506 M (To include these characters they must be preceded by the % escape as in atom ) S
14400 33706 M (names.) S
18000 31306 M (Example:) S
21600 28906 M ("String with single %% percent sign") S
1400 /Times-Bold-Acnt F
10800 25157 M (String manipulation functions) S
1200 /Times-Roman-Acnt F
14400 21506 M (Interlisp has a number of functions that allow you to manipulate strings, i.e., to ) S
14400 19706 M (create strings, to concatenate strings, to decompose strings, to search through ) S
14400 17906 M (strings, etc.) S
1200 /Times-Bold-Acnt F
14400 14306 M (String predicate) S
18000 10706 M (\(STRINGP ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Arg) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
( if ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
( is a string, NIL otherwise.) S
21600 8706 M (Examples:) S
grestore savepage restore showpage

%%Page: 21 21
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (16) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
25200 71106 M (1_\(STRINGP "ABC"\)) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
25200 69106 M ("ABC") S
1200 /Times-Roman-Acnt F
25200 67106 M (2_\(STRINGP 'ABCDEF\)) S
1200 /Times-Italic-Acnt F
25200 65106 M (NIL) S
1200 /Times-Roman-Acnt F
25200 63106 M (3_\(STRINGP \(LIST 1 2 3 4\)\)) S
1200 /Times-Italic-Acnt F
25200 61106 M (NIL) S
1200 /Times-Roman-Acnt F
25200 59106 M (8_\(STRINGP \(TEDIT\)\)) S
1200 /Times-Italic-Acnt F
25200 57106 M (NIL) S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
14400 53506 M (Creating strings) S
18000 49906 M (\(MKSTRING ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Arg) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 If ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
( is already a string, returns ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
(.  Otherwise, ) S
18000 48106 M (makes and returns a string containing the print name of ) S
1200 /Times-Italic-Acnt F
(Arg) S
1200 /Times-Roman-Acnt F
(.) S
21600 46106 M (Examples:) S
25200 44106 M (5_\(MKSTRING "ABC"\)) S
1200 /Times-Italic-Acnt F
25200 42106 M ("ABC") S
1200 /Times-Roman-Acnt F
25200 40106 M (6_\(MKSTRING 'ABCDEF\)) S
1200 /Times-Italic-Acnt F
25200 38106 M ("ABCDEF") S
1200 /Times-Roman-Acnt F
25200 36106 M (7_\(MKSTRING \(LIST 1 2 3 4\)\)) S
1200 /Times-Italic-Acnt F
25200 34106 M ("\(1 2 3 4\)") S
1200 /Times-Roman-Acnt F
25200 32106 M (8_\(MKSTRING \(TEDIT\)\)) S
1200 /Times-Italic-Acnt F
25200 30106 M ("{PROCESS}#61,130000") S
1200 /Times-Bold-Acnt F
18000 26506 M (\(ALLOCSTRING ) S
1200 /Times-BoldItalic-Acnt F
(N Character) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns a string ) S
1200 /Times-Italic-Acnt F
(N) S
1200 /Times-Roman-Acnt F
( characters long ) S
18000 24706 M (where each character is ) S
1200 /Times-Italic-Acnt F
(Character) S
1200 /Times-Roman-Acnt F
(.  ) S
1200 /Times-Italic-Acnt F
(Character) S
1200 /Times-Roman-Acnt F
( can be a single character ) S
18000 22906 M (string/atom or a character code \(see LispCourse #10, page 5\)) S
21600 20906 M (Examples:) S
25200 18906 M (9_\(ALLOCSTRING 5 "A"\)) S
1200 /Times-Italic-Acnt F
25200 16906 M ("AAAAA") S
1200 /Times-Roman-Acnt F
25200 14906 M (10_\(ALLOCSTRING 15 'B\)) S
1200 /Times-Italic-Acnt F
25200 12906 M ("BBBBBBBBBBBBBBB") S
1200 /Times-Roman-Acnt F
25200 10906 M (11_\(ALLOCSTRING \(PLUS 3 4\) 63\)) S
1200 /Times-Italic-Acnt F
25200 8906 M ("???????") S
grestore savepage restore showpage

%%Page: 22 22
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (17) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
25200 71106 M (12_\(ALLOCSTRING 7 \(CHARCODE ?\)\)) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
25200 69106 M ("???????") S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
14400 65506 M (Comparing strings) S
18000 61906 M (\(STREQUAL ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Str1 Str2) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns T is ) S
1200 /Times-Italic-Acnt F
(Str1) S
1200 /Times-Roman-Acnt F
( and ) S
1200 /Times-Italic-Acnt F
(Str2) S
1200 /Times-Roman-Acnt F
( are both strings and ) S
18000 60106 M (contain the same sequence of characters.) S
21600 58106 M (Examples:) S
25200 56106 M (13_\(STREQUAL "ABCDEF "ABCDEF"\)) S
1200 /Times-Italic-Acnt F
25200 54106 M (T) S
1200 /Times-Roman-Acnt F
25200 52106 M (14_\(STREQUAL \(ALLOCSTRING 5 'A\) "AAAAA"\)) S
1200 /Times-Italic-Acnt F
25200 50106 M (T) S
1200 /Times-Roman-Acnt F
25200 48106 M (15_\(STREQUAL 'A "A"\)) S
1200 /Times-Italic-Acnt F
25200 46106 M (NIL) S
1200 /Times-Roman-Acnt F
25200 44106 M (16_\(STREQUAL \(MKSTRING 'AAA\)\(ALLOCSTRING 3 ) S
25200 42306 M ("A"\)\)) S
1200 /Times-Italic-Acnt F
25200 40306 M (T) S
1200 /Times-Bold-Acnt F
14400 36706 M (Concatenating strings) S
18000 33106 M (\(CONCAT ) S
1200 /Times-BoldItalic-Acnt F
(Str1 Str2 ...) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns a new string that consists of the ) S
18000 31306 M (concatenation of the characters in ) S
1200 /Times-Italic-Acnt F
(Str1) S
1200 /Times-Roman-Acnt F
(, ) S
1200 /Times-Italic-Acnt F
(Str2) S
1200 /Times-Roman-Acnt F
(, ) S
1200 /Times-Italic-Acnt F
(Str3) S
1200 /Times-Roman-Acnt F
( ....  If any ) S
1200 /Times-Italic-Acnt F
(StrI) S
1200 /Times-Roman-Acnt F
( is not a ) S
18000 29506 M (string, the MKSTRING of that ) S
1200 /Times-Italic-Acnt F
(STRI) S
1200 /Times-Roman-Acnt F
( is used instead of ) S
1200 /Times-Italic-Acnt F
(StrI) S
1200 /Times-Roman-Acnt F
(.) S
21600 27506 M (Examples:) S
25200 25506 M (17_\(CONCAT "ABCDEF "GHIJKL"\)) S
1200 /Times-Italic-Acnt F
25200 23506 M ("ABCDEFGHIJKL") S
1200 /Times-Roman-Acnt F
25200 21506 M (18_\(CONCAT \(ALLOCSTRING 5 'A\) "FOO BAR"\)) S
1200 /Times-Italic-Acnt F
25200 19506 M ("AAAAAFOO BAR") S
1200 /Times-Roman-Acnt F
25200 17506 M (19_\(CONCAT 1234 " " 5678 " " \(LIST 9 0\)\)) S
1200 /Times-Italic-Acnt F
25200 15506 M ("1234 5678 \(9 0\)") S
1200 /Times-Roman-Acnt F
25200 13506 M (20_\(CONCAT "This is the kind of value that TEdit returns ) S
25200 11706 M (-- " \(TEDIT\)\)) S
grestore savepage restore showpage

%%Page: 23 23
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (18) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
25200 71106 M ("This is the kind of value that TEdit returns -- ) S
25200 69306 M ({PROCESS}#61,130000") S
/Times-Bold /Times-Bold-Acnt encodefont
1200 /Times-Bold-Acnt F
14400 65706 M (Decomposing strings) S
18000 62106 M (\(SUBSTRING ) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
(Str Start End) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Returns a new string that consists of the ) S
18000 60306 M (characters of ) S
1200 /Times-Italic-Acnt F
(Str) S
1200 /Times-Roman-Acnt F
( starting at character number ) S
1200 /Times-Italic-Acnt F
(Start) S
1200 /Times-Roman-Acnt F
( and ending at character ) S
18000 58506 M (number ) S
1200 /Times-Italic-Acnt F
(End) S
1200 /Times-Roman-Acnt F
(.  ) S
21600 56306 M (If ) S
1200 /Times-Italic-Acnt F
(End) S
1200 /Times-Roman-Acnt F
( is NIL, the last character of ) S
1200 /Times-Italic-Acnt F
(Str) S
1200 /Times-Roman-Acnt F
( is used.) S
21600 54106 M (If ) S
1200 /Times-Italic-Acnt F
(Start) S
1200 /Times-Roman-Acnt F
( or ) S
1200 /Times-Italic-Acnt F
(End) S
1200 /Times-Roman-Acnt F
( are negative, they are interpreted as being positions ) S
21600 52306 M (from the end of ) S
1200 /Times-Italic-Acnt F
(Str) S
1200 /Times-Roman-Acnt F
(.) S
21600 50306 M (Examples:) S
25200 48306 M (21_\(SUBSTRING "ABCDEF 2 4\)) S
1200 /Times-Italic-Acnt F
25200 46306 M ("BCD") S
1200 /Times-Roman-Acnt F
25200 44306 M (22_\(SUBSTRING "FOO BAR" 4\)) S
1200 /Times-Italic-Acnt F
25200 42306 M (" BAR") S
1200 /Times-Roman-Acnt F
25200 40306 M (23_\(SUBSTRING "FOO BAR" \2333\)) S
1200 /Times-Italic-Acnt F
25200 38306 M ("BAR") S
1200 /Times-Roman-Acnt F
25200 36306 M (24_\(SUBSTRING "FOO BAR" 2 -2\)) S
1200 /Times-Italic-Acnt F
25200 34306 M ("OO BA") S
1200 /Times-Bold-Acnt F
14400 30706 M (Searching strings) S
18000 27106 M (\(STRPOS ) S
1200 /Times-BoldItalic-Acnt F
(Pattern String Start SkipChar) S
1200 /Times-Bold-Acnt F
(\)) S
1200 /Times-Roman-Acnt F
( \234 Searches through string ) S
1200 /Times-Italic-Acnt F
(String) S
1200 /Times-Roman-Acnt F
( ) S
18000 25306 M (looking for any sequences of characters that matches the characters in ) S
18000 23506 M (string ) S
1200 /Times-Italic-Acnt F
(Pattern) S
1200 /Times-Roman-Acnt F
(.  If a match is found, STRPOS returns the number of the ) S
18000 21706 M (character in ) S
1200 /Times-Italic-Acnt F
(String) S
1200 /Times-Roman-Acnt F
( where the match starts.  If no match is found, STRPOS ) S
18000 19906 M (returns NIL.) S
21600 17106 M (If ) S
1200 /Times-Italic-Acnt F
(Start) S
1200 /Times-Roman-Acnt F
( is specified, the search begins at character number ) S
1200 /Times-Italic-Acnt F
(Start) S
1200 /Times-Roman-Acnt F
( in ) S
1200 /Times-Italic-Acnt F
21600 15306 M (String) S
1200 /Times-Roman-Acnt F
(.) S
21600 12506 M (If ) S
1200 /Times-Italic-Acnt F
(SkipChar) S
1200 /Times-Roman-Acnt F
( is specified, any instance of ) S
1200 /Times-Italic-Acnt F
(SkipChar) S
1200 /Times-Roman-Acnt F
( in the ) S
1200 /Times-Italic-Acnt F
(Pattern) S
1200 /Times-Roman-Acnt F
( ) S
21600 10706 M (string will match any character in ) S
1200 /Times-Italic-Acnt F
(String) S
1200 /Times-Roman-Acnt F
(.  \() S
1200 /Times-Italic-Acnt F
(SkipChar) S
1200 /Times-Roman-Acnt F
( is the ) S
21600 8906 M (wildcard character\).) S
grestore savepage restore showpage

%%Page: 24 24
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (19) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
21600 71106 M (If ) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
(Pattern) S
/Times-BoldItalic /Times-BoldItalic-Acnt encodefont
1200 /Times-BoldItalic-Acnt F
( ) S
1200 /Times-Roman-Acnt F
(and/or) S
1200 /Times-BoldItalic-Acnt F
( ) S
1200 /Times-Italic-Acnt F
(String) S
1200 /Times-Roman-Acnt F
( are not strings, their MKSTRINGs will be ) S
21600 69306 M (used instead.) S
21600 66706 M (Examples:) S
25200 64706 M (25_\(STRPOS "Q" "ABCDEF"\)) S
1200 /Times-Italic-Acnt F
25200 62706 M (NIL) S
1200 /Times-Roman-Acnt F
25200 60706 M (26_\(STRPOS "D" "ABCDEF"\)) S
1200 /Times-Italic-Acnt F
25200 58706 M (4) S
1200 /Times-Roman-Acnt F
25200 56706 M (27_\(STRPOS "C*E" "ABCDEF" NIL "*"\)) S
1200 /Times-Italic-Acnt F
25200 54706 M (3) S
1200 /Times-Roman-Acnt F
25200 52706 M (28_\(STRPOS "O" "FOO BAR" 4\)) S
1200 /Times-Italic-Acnt F
25200 50706 M (NIL) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
10800 46957 M (Using Strings) S
1200 /Times-Roman-Acnt F
14400 43306 M (Given a list of strings of the format:  "Name:  ) S
1200 /Times-Italic-Acnt F
(Last) S
1200 /Times-Roman-Acnt F
(,) S
1200 /Times-Italic-Acnt F
(First) S
1200 /Times-Roman-Acnt F
(".) S
14400 39706 M (Write a function to extract all names with "sz" in them.  The function should ) S
14400 37906 M (return a list of strings with the format ") S
1200 /Times-Italic-Acnt F
(First) S
1200 /Times-Roman-Acnt F
( ) S
1200 /Times-Italic-Acnt F
(Last) S
1200 /Times-Roman-Acnt F
(".) S
14400 34306 M (\(DEFINEQ) S
18000 32306 M (\(LC.szP \(LAMBDA \(String\)) S
21600 30306 M (\(* * Does String have an sz in it?\)) S
25200 28306 M (\(OR \(STRPOS "sz" String\)) S
28800 26306 M (\(STRPOS "Sz" String\)) S
28800 24306 M (\(STRPOS "sZ" String\)) S
28800 22306 M (\(STRPOS "SZ" String\)\)\)\)) S
18000 19506 M (\(LC.GetLastName \(LAMBDA \(String\)) S
21600 17506 M (\(* * Extract the last name from the string\)) S
25200 15506 M (\(SUBSTRING String) S
28800 13506 M (\(PLUS 1 \(STRPOS " " String\)\)) S
28800 11506 M (\(DIFFERENCE \(STRPOS "," String\) 1\)\)\)\)) S
18000 8706 M (\(LC.GetFirstName \(LAMBDA \(String\)) S
grestore savepage restore showpage

%%Page: 25 25
%%BeginPageSetup
/savepage save def
0.01 imagesizefactor mul dup scale
%%EndPageSetup
gsave
 0 rotate 
 79200 61200 0 0 CLP
/Times-Roman /Times-Roman-Acnt encodefont
1200 /Times-Roman-Acnt F
52800 75600 M (20) S
7200 75600 M (LispCourse #28:  Type Checking; Strings; Arrays) S
21600 71106 M (\(* * Extract the first name from the string\)) S
25200 69106 M (\(SUBSTRING String \(PLUS 1 \(STRPOS "," String\)\)\)\)\)) S
18000 66306 M (\(LC.FindSzNames \(LAMBDA \(List\)) S
21600 64306 M (\(* * Extract all names with sz in the last name\)) S
25200 62306 M (\(FOR Entry in List) S
28800 60306 M (WHEN \(LC.szP Entry\)) S
28800 58306 M (COLLECT) S
32400 56306 M (\(CONCAT) S
36000 54306 M (\(LC.GetFirstName Entry\)) S
36000 52306 M (" ") S
36000 50306 M (\(LC.GetLastName Entry\)\)\)\)\)\)) S
18000 46706 M (6_\(SETQ TestList \(QUOTE) S
28800 45106 M (\("Name: Halasz,Frank" "Name: Smith, Sam") S
28800 43506 M ("Name: Beals, Szmatha"  "Name: Schatz,Sheila"\)\)\)) S
/Times-Italic /Times-Italic-Acnt encodefont
1200 /Times-Italic-Acnt F
18000 42306 M (\("Name: Halasz,Frank" "Name: Smith, Sam" "Name: Beals, Szmatha" ) S
18000 41106 M ("Name: Schatz,Sheila"\)) S
1200 /Times-Roman-Acnt F
18000 39706 M (7_\(LC.szP \(CAR TestList\)\)) S
1200 /Times-Italic-Acnt F
18000 38306 M (11) S
1200 /Times-Roman-Acnt F
18000 36906 M (8_\(LC.GetFirstName \(CAR TestList\)\)) S
1200 /Times-Italic-Acnt F
18000 35506 M ("Frank") S
1200 /Times-Roman-Acnt F
18000 34106 M (9_\(LC.GetLastName \(CAR TestList\)\)) S
1200 /Times-Italic-Acnt F
18000 32706 M ("Halasz") S
1200 /Times-Roman-Acnt F
18000 31306 M (10_\(LC.FindSzNames TestList\)) S
1200 /Times-Italic-Acnt F
18000 29906 M (\("Frank Halasz" " Szmatha Beals"\)) S
/Times-Bold /Times-Bold-Acnt encodefont
1400 /Times-Bold-Acnt F
7200 26757 M (References) S
1200 /Times-Roman-Acnt F
10800 24306 M (In general, primitive data types are covered in Chapter 2 of the IRM.) S
10800 21906 M (Arrays are covered in Section 2.7.) S
10800 19506 M (Strings are covered in Section 2.6.) S
grestore savepage restore showpage

%%Trailer
